{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u2666 ethtools - EVM Hacking on Steroids","text":"<p><code>ethtools</code> is a project inspired by the widely popular CTF exploitation framework <code>pwntools</code>, and the amazing enhanched GDB utility <code>GEF</code> by @hugsy. In other words, <code>ethtools</code> is all you every wanted for debugging and interacting with smart contracts on EVM-based blockchains.</p> <p>The project started due to the frustration of @honululu and I (@degrigis), when trying to debug exploits for the ethernaut challenges. With <code>ethtools</code>, we hope to improve people education regarding smart contract and blockchain analysis, and facilitate research efforts in the area.</p> <p>Currently, <code>ethtools</code> is composed by two modules: <code>ethpwn</code>, a set of handy wrappers for the <code>web3</code> Python package (in pwntools style!), and <code>ethdbg</code>, a CLI debugger that let users set breakpoints, inspect memory, storage (and more!) in a GDB-like interface.</p> <p><code>ethtools</code> requires Python3.</p> <p></p>"},{"location":"#quick-start","title":"\u26a1\ufe0f Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>To start with <code>ethtools</code>, you only need Python3, we will take care of the rest.</p> <p>You can verify your Python version with:</p> <pre><code>hacker@eth:~$ python3 --version\nPython 3.8.10\n</code></pre> <p>Make sure you have the latest version of <code>pip</code> or you won't be able to install the tool in editable mode. <pre><code>hacker@eth:~$ pip --version\npip 23.1.2\n</code></pre> We strongly suggest to create a Python3 virtual environment before proceeding.</p> <p>Once you have done that, just:</p> <pre><code>git clone git@github.com:ethpwn/ethtools.git &amp;&amp; pip install -e ethtools/pwn\n</code></pre> <p>This command will install both <code>ethdbg</code> and <code>ethpwn</code> in your system.</p>"},{"location":"#rpc-node","title":"RPC Node","text":"<p>Assuming that you want to work with Ethereum mainnet,   you will need an access to an Ethereum RPC node:</p>"},{"location":"#custom-rpc-node","title":"Custom RPC node","text":"<p>If you have your own node, just grab the RPC endpoint address and you are good to go. The link you will get is something like: <code>ws://192.168.1.1:8546</code>.</p>"},{"location":"#public-rpc-node","title":"Public RPC node","text":"<p>If you do not have an Ethereum node, or you simply do not want to use your own, you can easily get access to a public one by using a service like Infura or Alchemy.  These providers offer a free tier for accessing the RPC nodes of many different blockchains (e.g., Ethereum, Sepolia, Avalanche)</p> <p>The link you will get is something like: <code>https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222</code>.</p> \u26a0\ufe0f Warning While these providers offer public nodes access, the RPC URL is generated per-user. DO NOT spread the obtained URL on the internet or people will start to make requests using your account and you will quickly ran out of queries (i.e., the free tier is rate-limited, but it's totally enough for using <code>ethtool</code> in a normal work-day)."},{"location":"#run","title":"\ud83d\ude80 Run","text":"<p>If you are here just to give a try to <code>ethdbg</code>, a very simple way to debug a transaction that happened on the Ethereum mainnet is:</p> <pre><code>ethdbg --txid 0x82a11757c3f34c2882e209c6e5ae96aff3e4db7f7984d54f92b02e1fed87e834 --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222\n</code></pre> <p>To learn more about the debugging features available in <code>ethdbg</code>, and the functionalities of <code>ethpwn</code>, please refer to their pages.</p>"},{"location":"#bugs-feedbacks","title":"\ud83e\udeb2 Bugs &amp; Feedbacks","text":"<p>For any bugs and feedback please either open an issue on our Github repository, or, even better, a pull request!  Please keep in mind this is a tool developed for fun in our spare time, we currently cannot commit to regular releases and bug fixes.</p>"},{"location":"#contributions","title":"\ud83d\udee0\ufe0f Contributions","text":"<p><code>ethtools</code> is currently mainly maintained by degrigis and honululu and the following contributors:</p> <p></p>"},{"location":"chains/","title":"\u26d3\ufe0f chains support","text":"<p><code>ethtools</code> currently has a backend that can only support EVM-based chains.  </p> <p>Currently we support a few of them:</p> Chain Name Chain Id Supported mainnet 1 \u2705 sepolia (testnet) 11155111 \u2705"},{"location":"faq/","title":"\uff1fFAQ","text":""},{"location":"faq/#are-transactions-sent-to-the-real-network","title":"Are transactions sent to the real network?","text":"<p>When debugging a transaction with <code>ethdbg</code> everything is emulated locally and nothing is sent on the actual blockchain.  The connection to the chain RPC node is only needed to pull different information related to the transaction under debugging. </p> <p>On the other side, when using <code>ethpwn</code>, the library connects to the target blockchain and it is able to perform operations on it. While you can use Sepolia ETH to perform your tests, be always careful NOT to use important accounts with actual valuable funds when using <code>ethtools</code>.</p>"},{"location":"faq/#are-you-gonna-support-other-evm-based-chain","title":"Are you gonna support other EVM-based chain?","text":"<p>While <code>ethtools</code> can support other EVM-based chain, currently we do not have the manpower to maintain other chains. We will rely on the community to further expand <code>ethtools</code> compatibility.</p>"},{"location":"faq/#are-you-gonna-support-non-evm-based-chain","title":"Are you gonna support non-EVM-based chain?","text":"<p><code>ethtools</code> uses as its backend <code>py-evm</code>, hence, any non-EVM-based blockchain is currently out-of-scope.</p>"},{"location":"faq/#how-can-i-contribute","title":"How can I contribute?","text":"<p>See our TODO, we are happy to accept pull request for those features! If you have anything else in mind just reach out on our Github page, or on twitter @degrigis, @honululu.</p>"},{"location":"ethdbg/","title":"Installing ethdbg","text":""},{"location":"ethdbg/commands/","title":"Commands","text":""},{"location":"ethdbg/showroom/","title":"Showroom","text":"<p>Here a few interesting debugging sessions done with <code>ethdbg</code> (will add more in the future).</p>"},{"location":"ethdbg/showroom/#debugging-polynetwork-hack","title":"\ud83c\udfaa Debugging Polynetwork hack","text":""},{"location":"ethdbg/usage/","title":"Usage","text":""},{"location":"ethdbg/usage/#config-file","title":"\ud83d\udcdd Config File","text":"<p>There are two main configuration files that can be used to configure the behavior of <code>ethdbg</code>.</p>"},{"location":"ethdbg/usage/#walletsjson","title":"\u2666\ufe0f wallets.json","text":"<p>This file is located at <code>~/.config/ethtools</code> and contains the configuration for the accounts that you want to use when  debugging transactions with <code>ethdbg</code>.  An example of such configuration is the following:</p> <pre><code>[\n{\"address\": \"0x1a5984F43dAD95a5121b1b30B9190d619d84d21C\", \"private_key\": \"0x2838aa1e473a046941d3ee4481396b9c54c944a6b6321e489b654554125f374b\", \"network\": \"mainnet\", \"name\": \"my-test-wallet\", \"description\": \"Default wallet generated by ethtools on 2023-07-09 13:12:05.184774\"}\n]\n</code></pre> \ud83d\uded1 Warning DO NOT use in this config file an account and a private key that holds valuable assets! This file is NOT protected in any way. Putting sensitive private key here might lead to exposing them in clear and potentially causing the lost of the funds on the related account. ALWAYS use test accounts! <p><code>ethdbg</code> will generated a default wallet with a random account if you do not specify one and will use it for signing transactions. Conversely, if you have multiple accounts such as:</p> <pre><code>[\n{\"address\": \"0x1a5984F43dAD95a5121b1b30B9190d619d84d21C\", \"private_key\": \"0x2838aa1e473a046941d3ee4481396b9c54c944a6b6321e489b654554125f374b\", \"network\": \"mainnet\", \"name\": \"my-test-wallet\", \"description\": \"Default wallet generated by ethtools on 2023-07-09 13:12:05.184774\"},\n{\"address\": \"0x2c076bc7090686fad57814965D53722CFC3e0B13\", \"private_key\": \"0x51f300465cba08ec2a83d58223824a5b7902c76d64920a5ad90b5bcfd24c6565\", \"network\": \"sepolia\", \"name\": \"my-sepolia-wallet\", \"description\": \"Default wallet generated by ethtools on 2023-07-15 10:49:19.516119\"}\n]\n</code></pre> <p>You can select the wallet you want to use by using the <code>--wallet</code> command line option and the \"name\" of the wallet, e.g.:</p> <pre><code>ethdbg --target 0xeC55Bf7E10b6594874554BAd1B461214Cab413d4 --calldata cbd8c06a00000000000000 --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222 --block 11469711 --wallet my-sepolia-wallet\n</code></pre>"},{"location":"ethdbg/usage/#ethdbg_config","title":"\u2666\ufe0f ethdbg_config","text":"<p>This file is located at <code>~/.config/ethtools</code> and configure the behavior of <code>ethdbg</code> while debugging. The most basic configuration is the following:</p> <pre><code>{\n\"node_url\": 'https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222'\n}\n</code></pre> <p>Additionally, you can use the following options:</p> Option String Option Summary Default <code>show_opcodes_desc</code> weather to display or not the description of the EVM opcode True <code>stop_on_returns</code> weather you want <code>ethdbg</code> to always stop at RETURN opcodes True <code>hide_sstores</code> weather you want to hide from the context the sstores issued for the current account False <code>hide_sloads</code> weather you want to hide from the context the sloads issued for the current account False <p>An example configuration would look like this:,  <pre><code>{\n\"node_url\": 'https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222',\n\"show_opcodes_desc\": false,\n\"stop_on_returns\": false,\n\"hide_sstores\": true,\n\"hide_sloads\": true\n}\n</code></pre></p>"},{"location":"ethdbg/usage/#command-line-arguments","title":"\u26a1\ufe0f Command Line Arguments","text":"<p><code>ethdbg</code> supports different command line arguments that can customize your analysis.</p> <p>The following options can be used, for instance, to send a fresh new transaction to a <code>target</code> smart contract with custom <code>calldata</code>, or, replaying a given transaction (<code>txid</code>) with a different <code>sender</code> and more!</p> Option String Required Default Option Summary ['--txid'] False None Instantiate ethdbg to replay an exisiting transaction. ['--full-context'] False False Given a transaction <code>T</code> that you want to replay, weather or not you want to apply the  transactions preceeding <code>T</code> in the block (i.e., the execution of some transactions might depend from the execution of the previous one!). ['--sender'] False The original sender in the transaction (if <code>txid</code> is specified), otherwise, the sender in your wallet.json Weather you want to overwrite the address of the sender when replaying a transaction, or, creating a fresh one. ['--balance'] False balance of the original sender in the transaction (if <code>txid</code> is specified), otherwise, a placeholder value of 100000000 ETH. Overwriting the balance of the sender you are using to debug the target transaction. ['--node-url'] False value in the ethdbg_config file, or, <code>127.0.0.1:8546</code>. URL of the RPC node you want to use. ['--target'] False The original contract address (if <code>txid</code> is specified) Target smart contract address when trying to send a new transaction. ['--block'] False The original block (if <code>txid</code> is specified), otherwise the <code>latest</code> block. Block at which you want to shoot a new transaction (i.e., the transaction will be shooted at the beginning of the block). ['--calldata'] False The original calldata of the transaction (if <code>txid</code> is specified) Calldata you want to use for a new transaction ['--wallet'] False If no name is specified, <code>ethdbg</code> automatically generates an account for you Name of the account you want to use as specified in the configuration file \u2757\ufe0f Note Either <code>--txid</code> or <code>--target</code> must be specified when starting <code>ethdbg</code>"},{"location":"ethdbg/usage/#examples-usage","title":"\ud83d\ude80 Examples Usage","text":""},{"location":"ethdbg/usage/#replay-an-existing-transaction-on-chain-as-is","title":"\u2666\ufe0f Replay an existing transaction on-chain as-is.","text":"<pre><code>ethdbg --txid 0x168f7f3acd40e0632e11b208c40ecc3c790bcb46c131f0207892859871ec3d3e --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222\n</code></pre>"},{"location":"ethdbg/usage/#replay-an-existing-transaction-on-chain-as-is-with-full-context","title":"\u2666\ufe0f Replay an existing transaction on-chain as-is, with full context.","text":"<pre><code>ethdbg --txid 0x168f7f3acd40e0632e11b208c40ecc3c790bcb46c131f0207892859871ec3d3e --full-context --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222\n</code></pre>"},{"location":"ethdbg/usage/#replay-an-existing-transaction-on-chain-and-change-the-sender","title":"\u2666\ufe0f Replay an existing transaction on-chain and change the sender.","text":"<pre><code>ethdbg --txid 0x168f7f3acd40e0632e11b208c40ecc3c790bcb46c131f0207892859871ec3d3e --sender 0x1a5984F43dAD95a5121b1b30B9190d619d84d21C --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222\n</code></pre> \u2757\ufe0f Note The chosen sender must have enough funds to execute the transaction. You can use <code>--balance</code> to edit this value. <pre><code>ethdbg --txid 0x168f7f3acd40e0632e11b208c40ecc3c790bcb46c131f0207892859871ec3d3e --sender 0x1a5984F43dAD95a5121b1b30B9190d619d84d21C --balance 1000000000000000 --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222\n</code></pre>"},{"location":"ethdbg/usage/#replay-an-existing-transaction-at-a-different-block","title":"\u2666\ufe0f Replay an existing transaction at a different block.","text":"<pre><code>ethdbg --txid 0x168f7f3acd40e0632e11b208c40ecc3c790bcb46c131f0207892859871ec3d3e --block 17700180 --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222\n</code></pre>"},{"location":"ethdbg/usage/#send-a-new-transaction-to-target-contract-with-custom-calldata","title":"\u2666\ufe0f Send a new transaction to target contract with custom calldata.","text":"<pre><code>ethdbg --target 0xeC55Bf7E10b6594874554BAd1B461214Cab413d4 --calldata cbd8c06a00000000000000 --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222\n</code></pre>"},{"location":"ethdbg/usage/#send-a-new-transaction-to-target-contract-with-custom-calldata_1","title":"\u2666\ufe0f Send a new transaction to target contract with custom calldata","text":"<pre><code>ethdbg --target 0xeC55Bf7E10b6594874554BAd1B461214Cab413d4 --calldata cbd8c06a00000000000000 --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222\n</code></pre>"},{"location":"ethdbg/usage/#send-a-new-transaction-to-target-contract-with-custom-calldata-at-custom-block","title":"\u2666\ufe0f Send a new transaction to target contract with custom calldata at custom block.","text":"<pre><code>ethdbg --target 0xeC55Bf7E10b6594874554BAd1B461214Cab413d4 --calldata cbd8c06a00000000000000 --node-url https://mainnet.infura.io/v3/38eb4be006004da4a89315232040e222 --block 11469711\n</code></pre>"},{"location":"ethdbg/commands/break/","title":"break","text":"<p>The command <code>break</code> works similarly to a GDB breakpoint.</p> <p>A breakpoint in <code>ethdbg</code> can be <code>simple</code> or <code>conditional</code>.</p>"},{"location":"ethdbg/commands/break/#simple-breakpoint","title":"\ud83d\udca5 Simple Breakpoint","text":"<p>A simple breakpoint can be placed on a specific value of the <code>&lt;PC&gt;</code> or at a specific <code>&lt;OPCODE&gt;</code></p> <p>Syntax: </p> <ul> <li><code>break &lt;PC&gt;</code></li> <li><code>break &lt;OPCODE&gt;</code> </li> </ul> <p> </p> \u2757\ufe0f Note Make sure the chosen OPCODE is available in the EVM version currently executing the transaction."},{"location":"ethdbg/commands/break/#conditional-breakpoint","title":"\ud83d\udca5 Conditional Breakpoint","text":"<p>The expresiveness of a conditional breakpoint is currently quite limited, but they already support some interesting combination of events.</p> <p>A conditional breakpoint is set by specifying a tuple of the form <code>&lt;what&gt;&lt;when&gt;&lt;value&gt;</code>. Multiple <code>&lt;what&gt;&lt;when&gt;&lt;value&gt;</code> tuples create more complex stop conditions that are joined together in AND.</p> <p>Syntax:  <code>break &lt;what&gt;&lt;when&gt;&lt;value&gt;,&lt;what&gt;&lt;when&gt;&lt;value&gt;,...</code></p> <p>Currently we support the following <code>&lt;what&gt;</code> and <code>&lt;when&gt;</code>:</p> What Description <code>pc</code> specify the value of the PC <code>op</code> specify the OPCODE at which you want to stop <code>addr</code> specify what is the value of the code address executing <code>saddr</code> specify what is the value of the storage address executing <code>value</code> stop when a particular amount of ETH is sent as part of a CALL \u2757\ufe0f Note Note how <code>addr</code> and <code>saddr</code> represent different addresses. <code>addr</code> is the code address, i.e., the address of the smart contract currently executing. On the other hand, <code>saddr</code> is the storage address, i.e., the address of the contract whose storage will be modified when storage operations occurr (see DELEGATECALL) When Description <code>[= or ==]</code> Equality <code>!=</code> NOT equality <code>[&gt; or &gt;=]</code> Greater than/Greater or Equal then <code>[&lt; or &lt;=]</code> Lower than/Lower or Equal then <p>For instance, one can set a breakpoint only when the OPCODE is an <code>SSTORE</code> that operates on the storage of a specific contract address by doing: </p> <pre><code>break op=SSTORE,saddr=0x5a51E2ebF8D136926b9cA7b59B60464E7C44d2Eb\n</code></pre> <p></p>"},{"location":"ethdbg/commands/callhistory/","title":"callhistory","text":"<p>Display the history of all the calls performed during the execution of the transaction in a tree-like view.</p> <p>Syntax: <code>callhistory</code></p> <p></p>"},{"location":"ethdbg/commands/context/","title":"context","text":"<p>Print the current context of the EVM.</p> <p>Syntax: <code>context</code></p> <p></p>"},{"location":"ethdbg/commands/continue/","title":"continue","text":"<p>Just resumes the execution after a breakpoint.</p> <p>Syntax: <code>continue</code> </p> <p></p>"},{"location":"ethdbg/commands/ethtowei/","title":"ethtowei","text":"<p>Utility function to convert ETH into wei.</p> <p>Syntax: <code>ethtowei &lt;value&gt;</code></p> <p></p>"},{"location":"ethdbg/commands/finish/","title":"finish","text":"<p>Execute the code of the last contract pushed in the callstack until its return/stop.</p> <p>Syntax: <code>finish</code></p> <p>BEFORE: </p> <p>AFTER: </p>"},{"location":"ethdbg/commands/log_op/","title":"log_op","text":"<p>Log and display every opcode executed by the EVM.</p> <p>Syntax: <code>log_op</code> </p> <p></p>"},{"location":"ethdbg/commands/memory/","title":"memory","text":"<p>Display <code>&lt;length&gt;</code> bytes of the memory of the current smart contract executing at a specific <code>&lt;offset&gt;</code>.</p> <p>Syntax: <code>memory &lt;offset&gt; &lt;length&gt;</code></p> <p></p>"},{"location":"ethdbg/commands/next/","title":"next","text":"<p>move to the next OPCODE.</p> <p>Differently from <code>step</code>, if the next opcode transfers the execution to another smart contract (i.e., <code>CALL</code>,<code>DELEGATECALL</code>,<code>STATICCALL</code>,<code>CODECALL</code>), the next instruction you will be the one of the current contract (i.e., the current call and all the following are gonna be step over).</p> <p>Syntax: <code>next</code> </p> <p>BEFORE <code>next</code>: </p> <p>AFTER <code>next</code>: </p>"},{"location":"ethdbg/commands/sloads/","title":"sloads","text":"<p>Display SLOADs executed by the current storage account, or, the <code>&lt;account&gt;</code> provided by argument.</p> <p>Syntax: <code>sloads [&lt;address&gt;]</code></p> <p></p>"},{"location":"ethdbg/commands/sstores/","title":"sstores","text":"<p>Display SSTOREs executed by the current storage account, or, the <code>&lt;account&gt;</code> provided by argument.</p> <p>Syntax: <code>sstores [&lt;address&gt;]</code></p> <p></p>"},{"location":"ethdbg/commands/start/","title":"start","text":"<p>This command is used to start the EVM execution. By default, we stop at the very first opcode.</p> <p>Syntax: <code>start</code> </p> <p></p>"},{"location":"ethdbg/commands/step/","title":"step","text":"<p>move to the next OPCODE.</p> <p>If the next opcode transfers the execution to another smart contract (i.e., <code>CALL</code>,<code>DELEGATECALL</code>,<code>STATICCALL</code>,<code>CODECALL</code>), the next instruction you will stop at is in the target contract.</p> <p>Syntax: <code>&lt;step&gt;</code></p> <p>BEFORE <code>step</code>: </p> <p>AFTER <code>step</code>: </p>"},{"location":"ethdbg/commands/storageat/","title":"storageat","text":"<p>Display the value of the current storage <code>&lt;slot&gt;</code> of the current storage account.</p> <p>Syntax: <code>storagat &lt;slot&gt;</code></p> <p></p>"},{"location":"ethdbg/commands/tbreak/","title":"tbreak","text":"<p><code>tbreak</code> works like <code>break</code>, but the breakpoint is gonna be temporary.</p> <p>Syntax: See break</p>"},{"location":"ethdbg/commands/weitoeth/","title":"weitoeth","text":"<p>Utility function to convert wei int ETH.</p> <p>Syntax: <code>weitoeth &lt;value&gt;</code></p> <p></p>"},{"location":"ethpwn/showroom/","title":"Showroom","text":""},{"location":"ethpwn/showroom/#example-1","title":"Example 1","text":"<pre><code>#!/usr/bin/env python3\nimport sys\nimport argparse\nfrom time import sleep\nfrom ethpwn.prelude import *\nCONTRACT_SOURCE = '''\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\ncontract Fallback {\n  mapping(address =&gt; uint) public contributions;\n  address public owner;\n  constructor() {\n    owner = msg.sender;\n    contributions[msg.sender] = 1000 * (1 ether);\n  }\n  modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            \"caller is not the owner\"\n        );\n        _;\n    }\n  function contribute() public payable {\n    require(msg.value &lt; 0.001 ether);\n    contributions[msg.sender] += msg.value;\n    if(contributions[msg.sender] &gt; contributions[owner]) {\n      owner = msg.sender;\n    }\n  }\n  function getContribution() public view returns (uint) {\n    return contributions[msg.sender];\n  }\n  function withdraw() public onlyOwner {\n    payable(owner).transfer(address(this).balance);\n  }\n  receive() external payable {\n    require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);\n    owner = msg.sender;\n  }\n}\n'''\nparser = argparse.ArgumentParser()\nparser.add_argument('node_url', type=str, help='The node url to connect to')\nparser.add_argument('target_addr', type=str, help='The address of the contract to interact with')\nARGS = parser.parse_args()\ncontext.log_level = 'DEBUG'\ncontext.connect_http(ARGS.node_url)\nCONTRACT_METADATA.add_solidity_source(CONTRACT_SOURCE, 'Fallback.sol')\ntarget = CONTRACT_METADATA['Fallback'].get_contract_at(ARGS.target_addr)\n# set our contribution to non-zero\ntransact(target.functions.contribute(), value=wei(ether=0.0001))\ntransact(target.receive(), value=wei(ether=0.0001))\n</code></pre>"},{"location":"ethpwn/usage/","title":"Usage","text":"<p>TODO</p>"},{"location":"ethpwn/modules/alchemy_utils/","title":"ethtools.pwn.alchemy_utils","text":""},{"location":"ethpwn/modules/alchemy_utils/#ethtoolspwnalchemy_utils","title":"ethtools.pwn.alchemy_utils","text":""},{"location":"ethpwn/modules/alchemy_utils/#decode_simulation_trace","title":"decode_simulation_trace","text":"<pre><code>def decode_simulation_trace(trace)\n</code></pre> <p>Decode the simulation trace, and return a prettified list of the calls made</p> <p></p>"},{"location":"ethpwn/modules/alchemy_utils/#pretty_print_simulation_trace","title":"pretty_print_simulation_trace","text":"<pre><code>def pretty_print_simulation_trace(trace)\n</code></pre> <p>Pretty print the simulation trace</p> <p></p>"},{"location":"ethpwn/modules/alchemy_utils/#simulate_execution","title":"simulate_execution","text":"<pre><code>def simulate_execution(transaction_data)\n</code></pre> <p>Simulate the execution of a transaction, and return the trace</p>"},{"location":"ethpwn/modules/assembly_utils/","title":"ethtools.pwn.assembly_utils","text":""},{"location":"ethpwn/modules/assembly_utils/#ethtoolspwnassembly_utils","title":"ethtools.pwn.assembly_utils","text":"<p>Module containing utility functions for assembling and disassembling EVM bytecode manually and automatically.</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#value_to_smallest_hexbytes","title":"value_to_smallest_hexbytes","text":"<pre><code>def value_to_smallest_hexbytes(value)\n</code></pre> <p>Convert an integer to the smallest possible hexbytes</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#asm_push_value","title":"asm_push_value","text":"<pre><code>def asm_push_value(value)\n</code></pre> <p>Push value to the stack</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#asm_codecopy","title":"asm_codecopy","text":"<pre><code>def asm_codecopy(dst, src, size)\n</code></pre> <p>Copy code from src to dst</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#asm_return","title":"asm_return","text":"<pre><code>def asm_return(mem_offset, length)\n</code></pre> <p>Return a value from memory</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#asm_mstore","title":"asm_mstore","text":"<pre><code>def asm_mstore(mem_offset, value)\n</code></pre> <p>Store value at key</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#asm_mload","title":"asm_mload","text":"<pre><code>def asm_mload(mem_offset)\n</code></pre> <p>Load value at key</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#asm_sstore","title":"asm_sstore","text":"<pre><code>def asm_sstore(key, value)\n</code></pre> <p>Store value at key</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#asm_sload","title":"asm_sload","text":"<pre><code>def asm_sload(key)\n</code></pre> <p>Load value at key</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#create_shellcode_deployer_bin","title":"create_shellcode_deployer_bin","text":"<pre><code>def create_shellcode_deployer_bin(shellcode)\n</code></pre> <p>Create a contract that deploys shellcode at a specific address</p> <p></p>"},{"location":"ethpwn/modules/assembly_utils/#disassemble_pro","title":"disassemble_pro","text":"<pre><code>def disassemble_pro(code, start_pc=0, fork='paris')\n</code></pre> <p>Disassemble code and return a string containing the disassembly. This disassembly includes the pc, bytes, instruction, gas cost, and description of each instruction in addition to the standard disassembly.</p>"},{"location":"ethpwn/modules/contract_metadata/","title":"ethtools.pwn.contract_metadata","text":""},{"location":"ethpwn/modules/contract_metadata/#ethtoolspwncontract_metadata","title":"ethtools.pwn.contract_metadata","text":"<p>Module for everything to do with the contract metadata we have available. Contains the metadata registry which is our knowledge base of all the contracts we know about, and the <code>ContractMetadata</code> class which describes and holds that metadata for a single contract.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#contractmetadata-objects","title":"ContractMetadata Objects","text":"<pre><code>class ContractMetadata(Serializable)\n</code></pre> <p>Holds all of the metadata about a contract class we have available. Includes the ABI, the bytecode, the source code, and the source map.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#from_solidity","title":"from_solidity","text":"<pre><code>@staticmethod\ndef from_solidity(source_file, contract_name, output_json, sources)\n</code></pre> <p>Constructs a ContractMetadata object for a contract in <code>source_file</code> with name <code>contract_name</code> from the Compiler <code>output_json</code> and the <code>sources</code> dict.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#to_serializable","title":"to_serializable","text":"<pre><code>def to_serializable()\n</code></pre> <p>Returns a serializable dictionary representation of the object.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#from_serializable","title":"from_serializable","text":"<pre><code>@staticmethod\ndef from_serializable(value)\n</code></pre> <p>Loads a ContractMetadata object back from a serialized dictionary.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#constructor_source_by_id","title":"constructor_source_by_id","text":"<pre><code>def constructor_source_by_id(_id)\n</code></pre> <p>Looks up and returns the source code object for the given source id in the constructor code.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#runtime_source_by_id","title":"runtime_source_by_id","text":"<pre><code>def runtime_source_by_id(_id)\n</code></pre> <p>Looks up and returns the source code object for the given source id in the runtime code.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#symbolic_srcmap_constructor","title":"symbolic_srcmap_constructor","text":"<pre><code>@property\ndef symbolic_srcmap_constructor()\n</code></pre> <p>Returns the symbolized source map for the constructor bytecode.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#symbolic_srcmap_runtime","title":"symbolic_srcmap_runtime","text":"<pre><code>@property\ndef symbolic_srcmap_runtime()\n</code></pre> <p>Returns the symbolized source map for the runtime bytecode.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#closest_instruction_index_for_constructor_pc","title":"closest_instruction_index_for_constructor_pc","text":"<pre><code>def closest_instruction_index_for_constructor_pc(pc, fork='paris') -&gt; int\n</code></pre> <p>Returns the index of the closest instruction in the constructor bytecode that is before or at the given pc in the constructor bytecode.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#closest_instruction_index_for_runtime_pc","title":"closest_instruction_index_for_runtime_pc","text":"<pre><code>def closest_instruction_index_for_runtime_pc(pc, fork='paris') -&gt; int\n</code></pre> <p>Returns the index of the closest instruction in the runtime bytecode that is before or at the given pc in the runtime bytecode.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#source_info_for_constructor_instruction_idx","title":"source_info_for_constructor_instruction_idx","text":"<pre><code>def source_info_for_constructor_instruction_idx(\ninsn_idx) -&gt; InstructionSourceInfo\n</code></pre> <p>Returns the source info for instruction at index <code>insn_idx</code> in the constructor bytecode.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#source_info_for_runtime_instruction_idx","title":"source_info_for_runtime_instruction_idx","text":"<pre><code>def source_info_for_runtime_instruction_idx(insn_idx) -&gt; InstructionSourceInfo\n</code></pre> <p>Returns the source info for instruction at index <code>insn_idx</code> in the runtime bytecode.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#deploy","title":"deploy","text":"<pre><code>def deploy(*constructor_args, **tx_extras) -&gt; Tuple[HexBytes, Contract]\n</code></pre> <p>Deploys a contract and registers it with the contract registry.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#deploy_destructible","title":"deploy_destructible","text":"<pre><code>@contextmanager\ndef deploy_destructible(*constructor_args, **tx_extras)\n</code></pre> <p>Deploys a <code>Destructible</code> contract and <code>destroy()</code>s it after the context manager exits to retrieve any held funds. Utility function for quick one-off contracts so you can easily get your funds back by default. The resulting deployed contract will also be automatically registered with the contract registry.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#get_contract_at","title":"get_contract_at","text":"<pre><code>def get_contract_at(addr) -&gt; Contract\n</code></pre> <p>Returns a web3 contract instance for the contract at the given address. This will automatically register the contract at the given address with the contract registry.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#decode_function_input","title":"decode_function_input","text":"<pre><code>def decode_function_input(data)\n</code></pre> <p>Decodes the function input data for a contract of this class. Returns a tuple of the function name and a dictionary of the arguments.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#contractmetadataregistry-objects","title":"ContractMetadataRegistry Objects","text":"<pre><code>class ContractMetadataRegistry()\n</code></pre> <p>A registry containing all contracts and metadata for them that we know about. This is used to retrieve information about deployed contracts, associate new contracts with their metadata, and to retrieve metadata for contracts that are not deployed yet. This is the central point for all contract-related metadata.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#add_solidity_source","title":"add_solidity_source","text":"<pre><code>def add_solidity_source(source: str, file_name: Union[Path, str], **kwargs)\n</code></pre> <p>Compiles the given solidity source code and adds the resulting metadata of all contracts to the registry.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#add_contracts_from_solidity_files","title":"add_contracts_from_solidity_files","text":"<pre><code>def add_contracts_from_solidity_files(files: List[Union[str, Path]], **kwargs)\n</code></pre> <p>Compiles the given files and adds the resulting metadata of all contracts to the registry.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#iter_find","title":"iter_find","text":"<pre><code>def iter_find(predicate) -&gt; Iterator[Tuple[str, str, ContractMetadata]]\n</code></pre> <p>Iterate over all contracts matching <code>predicate</code>, yielding the file name, contract name, and metadata for each.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#find","title":"find","text":"<pre><code>def find(predicate) -&gt; Optional[Tuple[str, str, ContractMetadata]]\n</code></pre> <p>Find the first contract matching <code>predicate</code>, returning the file name, contract name, and metadata.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#iter_find_by_name","title":"iter_find_by_name","text":"<pre><code>def iter_find_by_name(\nname: str) -&gt; Iterator[Tuple[str, str, ContractMetadata]]\n</code></pre> <p>Iterate over all contracts with the given name, yielding the file name, contract name, and metadata for each.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#find_by_name","title":"find_by_name","text":"<pre><code>def find_by_name(name: str) -&gt; Optional[Tuple[str, str, ContractMetadata]]\n</code></pre> <p>Find the first contract with the given name, returning the file name, contract name, and metadata.</p> <p></p>"},{"location":"ethpwn/modules/contract_metadata/#all_contracts","title":"all_contracts","text":"<pre><code>def all_contracts()\n</code></pre> <p>Iterate over all contracts, yielding the file name, contract name, and metadata for each.</p>"},{"location":"ethpwn/modules/currency_utils/","title":"ethtools.pwn.currency_utils","text":""},{"location":"ethpwn/modules/currency_utils/#ethtoolspwncurrency_utils","title":"ethtools.pwn.currency_utils","text":"<p>Utilities for dealing with the different units of currency in the Ethereum ecosystem.</p> <p></p>"},{"location":"ethpwn/modules/currency_utils/#parse_wei","title":"parse_wei","text":"<pre><code>def parse_wei(value_string)\n</code></pre> <p>Parse a string representing into a wei value. The string can be in ether, gwei, or wei. If no unit is specified, it is assumed to be wei.</p> <p></p>"},{"location":"ethpwn/modules/currency_utils/#wei","title":"wei","text":"<pre><code>def wei(ether=None, gwei=None, wei=None)\n</code></pre> <p>Convert some amount of ether, gwei, and/or wei to wei. Returns the sum of all values so you can do <code>wei(ether=1, gwei=1)</code> to get 1 ether and 1 gwei in wei.</p> <p></p>"},{"location":"ethpwn/modules/currency_utils/#ether","title":"ether","text":"<pre><code>def ether(wei)\n</code></pre> <p>Convert wei to ether</p> <p></p>"},{"location":"ethpwn/modules/currency_utils/#gwei","title":"gwei","text":"<pre><code>def gwei(wei)\n</code></pre> <p>Convert wei to gwei</p>"},{"location":"ethpwn/modules/global_context/","title":"ethtools.pwn.global_context","text":""},{"location":"ethpwn/modules/global_context/#ethtoolspwnglobal_context","title":"ethtools.pwn.global_context","text":"<p>Global context accessible from anywhere in the ethpwn package (similar to the <code>context</code> in <code>pwntools</code>).</p> <p></p>"},{"location":"ethpwn/modules/global_context/#web3context-class","title":"Web3Context Class","text":"<pre><code>class Web3Context()\n</code></pre>"},{"location":"ethpwn/modules/global_context/#default_from_addr","title":"default_from_addr","text":"<pre><code>@property\ndef default_from_addr()\n</code></pre> <p>Get the default \"from\" address as set, or via the default wallet.</p> <p></p>"},{"location":"ethpwn/modules/global_context/#default_signing_key","title":"default_signing_key","text":"<pre><code>@property\ndef default_signing_key()\n</code></pre> <p>Get the default signing key</p> <p></p>"},{"location":"ethpwn/modules/global_context/#log_level","title":"log_level","text":"<pre><code>@property\ndef log_level()\n</code></pre> <p>Get the log level of the logger</p> <p></p>"},{"location":"ethpwn/modules/global_context/#connect","title":"connect","text":"<pre><code>def connect(url, can_fail=False, **kwargs)\n</code></pre> <p>Connect to an Ethereum node via HTTP/HTTPS, Websocket, or IPC depending on the URL scheme. If <code>can_fail</code> is True, the method will return <code>False</code> if cannot connect, otherwise, will raise an Exception.</p> <p></p>"},{"location":"ethpwn/modules/global_context/#connect_http","title":"connect_http","text":"<pre><code>def connect_http(url, can_fail=False, **kwargs)\n</code></pre> <p>Connect to a remote Ethereum node via HTTP/HTTPS</p> <p></p>"},{"location":"ethpwn/modules/global_context/#connect_ipc","title":"connect_ipc","text":"<pre><code>def connect_ipc(path='/home/eth/.ethereum/geth.ipc', can_fail=False)\n</code></pre> <p>Connect to a local Ethereum node via IPC</p> <p></p>"},{"location":"ethpwn/modules/global_context/#connect_websocket","title":"connect_websocket","text":"<pre><code>def connect_websocket(url, can_fail=False, **kwargs)\n</code></pre> <p>Connect to an Ethereum node via WebSockets</p> <p></p>"},{"location":"ethpwn/modules/global_context/#pessimistic_gas_price_estimate","title":"pessimistic_gas_price_estimate","text":"<pre><code>def pessimistic_gas_price_estimate()\n</code></pre> <p>Estimate the gas price for a transaction. This is a pessimistic estimate that will overestimate the gas price by a factor of 2. This should be good enough to mostly ensure that the transaction will be mined in a reasonable amount of time.</p> <p></p>"},{"location":"ethpwn/modules/global_context/#pessimistic_transaction_cost","title":"pessimistic_transaction_cost","text":"<pre><code>def pessimistic_transaction_cost(gas_used_estimate)\n</code></pre> <p>Estimate the cost of a transaction. This is a pessimistic estimate that will overestimate the gas price by a factor of 2. This should be good enough to mostly ensure that the transaction will be mined in a reasonable amount of time.</p> <p></p>"},{"location":"ethpwn/modules/global_context/#with_local_context","title":"with_local_context","text":"<pre><code>@contextlib.contextmanager\ndef with_local_context(**kwargs)\n</code></pre> <p>Temporarily set the global context to a new context. Will restore the old context when the context manager exits.</p>"},{"location":"ethpwn/modules/solidity_utils/","title":"ethtools.pwn.solidity_utils","text":""},{"location":"ethpwn/modules/solidity_utils/#ethtoolspwnsolidity_utils","title":"ethtools.pwn.solidity_utils","text":""},{"location":"ethpwn/modules/solidity_utils/#decode_solidity_metadata_from_bytecode","title":"decode_solidity_metadata_from_bytecode","text":"<pre><code>def decode_solidity_metadata_from_bytecode(bytecode)\n</code></pre> <p>Decodes the CBOR encoded solidity compiler metadata appended to the bytecode. Should include at least the IPFS hash and the solc version, but may include other information as well.</p> <p></p>"},{"location":"ethpwn/modules/solidity_utils/#try_match_optimizer_settings","title":"try_match_optimizer_settings","text":"<pre><code>def try_match_optimizer_settings(compile,\ncontract_name,\nbin=None,\nbin_runtime=None,\nsolc_versions=None,\nminimize=False)\n</code></pre> <p>Tries to match the optimizer settings of the given contract to the given bytecode by repeatedly</p> <p>compiling the contract with different optimizer settings until a match is found.</p> <pre><code>from ethpwn.prelude import *\n\ncompiler = SolidityCompiler()\ndo_compile = functools.partial(compiler.compile_files, ['contracts/MyContract.sol'])\n\ncode = context.w3.eth.getCode('0x...')\n\nbest_kwargs, meta, result_bytecode = try_match_optimizer_settings(do_compile, 'MyContract', bin_runtime=bytecode)\nprint(best_kwargs)\n</code></pre> <p>Arguments:</p> <ul> <li><code>compile</code>: A function that takes keyword arguments <code>optimizer_settings</code> and <code>solc_version</code> and returns the <code>output_json</code> from the solidity compiler. This is compatible with the <code>SolidityCompiler.compile_source</code> and <code>SolidityCompiler.compile_files</code> methods.</li> <li><code>contract_name</code>: The name of the contract to match</li> <li><code>bin</code>: The constructor bytecode of the contract to match or <code>None</code></li> <li><code>bin_runtime</code>: The runtime bytecode of the contract to match or <code>None</code></li> <li><code>solc_versions</code>: A list of solc versions to try, if the bytecode contains metadata declaring the solc version, this parameter is ignored.</li> <li><code>minimize</code>: Whether to try to minimize the number of optimizer runs or not</li> </ul>"},{"location":"ethpwn/modules/utils/","title":"ethtools.pwn.utils","text":""},{"location":"ethpwn/modules/utils/#ethtoolspwnutils","title":"ethtools.pwn.utils","text":""},{"location":"ethpwn/modules/utils/#normalize_contract_address","title":"normalize_contract_address","text":"<pre><code>@functools.lru_cache(maxsize=1024)\ndef normalize_contract_address(address) -&gt; str\n</code></pre> <p>Normalize a contract address</p>"}]}